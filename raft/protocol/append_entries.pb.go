// Code generated by protoc-gen-go. DO NOT EDIT.
// source: append_entries.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// There are two cases where this message can be used: As heartbeat
// and as call to replicate a log. But in each case only the leader
// can send this packet, no other type of node.
//
// If this message is being used as a heartbeat, the only thing different
// to a call to replicate is that the `Entries` are empty. The rest stays
// the same.
// Otherwise if the `Entries` are at least of length one, than this message
// serves as a call to replicate given entries/logs.
//
// Heartbeat:
// If used as a heartbeat, the `Entries` are empty. The heartbeat tells the other
// nodes, that a leader is still in authority and the response tells the leader, if
// the nodes are still existent as well and if the follower's log is correct.
//
// Replicate Logs:
// In this case `Entries` can have a length of `x >= 1`.
// If sent, the node has to try to append the given log entries.
// Gets a respond if the operation has been successful.
type AppendEntriesCall struct {
	// term of the leader
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// if of the leader
	LeaderId string `protobuf:"bytes,2,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	// id of the last log entry before these `Entries`
	PrevLogIndex uint64 `protobuf:"varint,3,opt,name=prevLogIndex,proto3" json:"prevLogIndex,omitempty"`
	// term of the last log entry
	PrevLogTerm uint64 `protobuf:"varint,4,opt,name=prevLogTerm,proto3" json:"prevLogTerm,omitempty"`
	// the entries to be sent (empty for simple heartbeat)
	Entries []*LogEntry `protobuf:"bytes,5,rep,name=entries,proto3" json:"entries,omitempty"`
	// index of the last commited log entry by the leader
	CommitIndex          uint64   `protobuf:"varint,6,opt,name=commitIndex,proto3" json:"commitIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesCall) Reset()         { *m = AppendEntriesCall{} }
func (m *AppendEntriesCall) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesCall) ProtoMessage()    {}
func (*AppendEntriesCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_append_entries_01736bc091125a32, []int{0}
}
func (m *AppendEntriesCall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesCall.Unmarshal(m, b)
}
func (m *AppendEntriesCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesCall.Marshal(b, m, deterministic)
}
func (dst *AppendEntriesCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesCall.Merge(dst, src)
}
func (m *AppendEntriesCall) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesCall.Size(m)
}
func (m *AppendEntriesCall) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesCall.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesCall proto.InternalMessageInfo

func (m *AppendEntriesCall) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesCall) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *AppendEntriesCall) GetPrevLogIndex() uint64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesCall) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesCall) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntriesCall) GetCommitIndex() uint64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

//
// This respond is being sent by a follower if it received an `AppendEntriesCall`.
//
// The `success` value is..
// - ..false, if the term sent by the leader is less than the term of this follower node
// - ..false, if log of follower doesn't contain entry with `prevLogIndex` AND `prevLogTerm`
// - ..true, if the conditions above are both not true
type AppendEntriesRespond struct {
	// current term of the follower
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// true if follower contained log entry with `prevLogIndex` and `prevLogTerm`
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesRespond) Reset()         { *m = AppendEntriesRespond{} }
func (m *AppendEntriesRespond) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesRespond) ProtoMessage()    {}
func (*AppendEntriesRespond) Descriptor() ([]byte, []int) {
	return fileDescriptor_append_entries_01736bc091125a32, []int{1}
}
func (m *AppendEntriesRespond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesRespond.Unmarshal(m, b)
}
func (m *AppendEntriesRespond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesRespond.Marshal(b, m, deterministic)
}
func (dst *AppendEntriesRespond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesRespond.Merge(dst, src)
}
func (m *AppendEntriesRespond) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesRespond.Size(m)
}
func (m *AppendEntriesRespond) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesRespond.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesRespond proto.InternalMessageInfo

func (m *AppendEntriesRespond) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRespond) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*AppendEntriesCall)(nil), "protocol.AppendEntriesCall")
	proto.RegisterType((*AppendEntriesRespond)(nil), "protocol.AppendEntriesRespond")
}

func init() {
	proto.RegisterFile("append_entries.proto", fileDescriptor_append_entries_01736bc091125a32)
}

var fileDescriptor_append_entries_01736bc091125a32 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x4f, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x25, 0x36, 0xb6, 0x71, 0x2a, 0x88, 0x43, 0x0f, 0x4b, 0x4f, 0x21, 0xa7, 0x1c, 0x24, 0x07,
	0xfd, 0x02, 0x51, 0x0f, 0x85, 0x9e, 0x16, 0xef, 0x12, 0xb3, 0x43, 0x28, 0x6c, 0x32, 0xcb, 0x6e,
	0x14, 0xfb, 0xa9, 0xfe, 0x8d, 0x64, 0xb6, 0x91, 0x06, 0x7a, 0xda, 0x7d, 0x6f, 0xe6, 0xbd, 0x79,
	0x0f, 0x36, 0xb5, 0x73, 0xd4, 0x9b, 0x0f, 0xea, 0x07, 0x7f, 0xa0, 0x50, 0x39, 0xcf, 0x03, 0x63,
	0x26, 0x4f, 0xc3, 0x76, 0x7b, 0x67, 0xb9, 0x95, 0xe1, 0x31, 0x8e, 0x8a, 0xdf, 0x04, 0xee, 0x9f,
	0x45, 0xf3, 0x16, 0x25, 0x2f, 0xb5, 0xb5, 0x88, 0x90, 0x0e, 0xe4, 0x3b, 0x95, 0xe4, 0x49, 0x99,
	0x6a, 0xf9, 0xe3, 0x16, 0x32, 0x4b, 0xb5, 0x21, 0xbf, 0x33, 0xea, 0x2a, 0x4f, 0xca, 0x1b, 0xfd,
	0x8f, 0xb1, 0x80, 0x5b, 0xe7, 0xe9, 0x7b, 0xcf, 0xed, 0xae, 0x37, 0xf4, 0xa3, 0x16, 0xa2, 0x9b,
	0x71, 0x98, 0xc3, 0xfa, 0x84, 0xdf, 0x47, 0xeb, 0x54, 0x56, 0xce, 0x29, 0x7c, 0x80, 0xd5, 0x29,
	0xb7, 0xba, 0xce, 0x17, 0xe5, 0xfa, 0x11, 0xab, 0x29, 0x78, 0xb5, 0xe7, 0x76, 0x0c, 0x78, 0xd4,
	0xd3, 0xca, 0xe8, 0xd7, 0x70, 0xd7, 0x1d, 0x86, 0x78, 0x72, 0x19, 0xfd, 0xce, 0xa8, 0xe2, 0x15,
	0x36, 0xb3, 0x6a, 0x9a, 0x82, 0xe3, 0xde, 0x5c, 0x6c, 0xa7, 0x60, 0x15, 0xbe, 0x9a, 0x86, 0x42,
	0x90, 0x72, 0x99, 0x9e, 0xe0, 0xe7, 0x52, 0x32, 0x3c, 0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7e,
	0xd5, 0x0b, 0x8c, 0x5b, 0x01, 0x00, 0x00,
}
